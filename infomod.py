import time
import psutil
import platform as lib_platform
import getpass
import telethon
import socket
import logging

from aiogram.types import Message as AiogramMessage, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery as AiogramCallbackQuery
from hikkatl.tl.types import Message
from hikkatl.utils import get_display_name
from ..inline.types import InlineCall, InlineQuery
from html import escape
from .. import loader, utils

logger = logging.getLogger(__name__)

# --- Helper functions ---
def bytes2human(n):
    symbols = ('B','K','M','G','T','P')
    prefix = {s:1<<(i*10) for i,s in enumerate(symbols[1:],1)}
    for s in reversed(symbols[1:]):
        if n >= prefix[s]:
            return f"{n/prefix[s]:.2f}{s}"
    return f"{n}B"

def format_uptime(sec):
    m, s = divmod(sec, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    return f"{int(d)}–¥ {int(h)}–≥ {int(m)}—Ö–≤"

def get_distro_info():
    name = ver = "N/A"
    try:
        with open("/etc/os-release") as f:
            data = dict(line.strip().split("=", 1) for line in f if "=" in line)
        name = data.get("PRETTY_NAME", data.get("NAME", "–ù–µ–≤—ñ–¥–æ–º–æ")).strip('"')
        ver = data.get("VERSION_ID", "").strip('"')
    except: pass
    return name, ver

def get_cpu_model():
    try:
        with open("/proc/cpuinfo") as f:
            for line in f:
                if "model name" in line:
                    return line.split(":",1)[1].strip()
    except: pass
    return lib_platform.processor() or "–ù–µ–≤—ñ–¥–æ–º–æ"

@loader.tds
class UniversalInfoMod(loader.Module):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –∑ —Ñ—ñ–¥–±–µ–∫ —Å–∏—Å—Ç–µ–º–æ—é"""

    strings = {
        "name": "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –Ü–Ω—Ñ–æ",
        
        # –§—ñ–¥–±–µ–∫ —Å–∏—Å—Ç–µ–º–∞
        "new_m": "üó£ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥",
        "not_text": "üîé –¢–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        "waiting_answer": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "flink": "–û—Å—å –º–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞",
        "owner_answer": "üó£ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤–ª–∞—Å–Ω–∏–∫–∞",
        "successfully_send": "üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ",
        "not_arg": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ UserID",
        "successfully_ban": "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
        "successfully_unban": "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ",
        "already_banned": "üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π",
        "not_in_ban": "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫—É –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö",
        "reply_button": "üìÉ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
        "feedback_description": "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É",
        "feedback_help": "–©–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ —Å—é–¥–∏.",
        "feedback_start": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞! –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –π–æ–≥–æ –ø–µ—Ä–µ—à–ª—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.",
        
        # –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        "send_sysinfo": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
        "sysinfo_description": "‚Ñπ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä",
        "send_donate_info": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –¥–æ–Ω–∞—Ç—É",
        "donate_description": "‚ù§Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ",
        "donate_text": """<b>–ü—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ –º–æ—é —Ç–≤–æ—Ä—á—ñ—Å—Ç—å</b>
<i>–ö–æ–∂–µ–Ω –≤–Ω–µ—Å–æ–∫ —Ä–æ–∑–ø–∞–ª—é—î –Ω–æ–≤—ñ —ñ–¥–µ—ó —ñ –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ –≤—ñ—Ä—à—ñ–≤ —Ç–∞ –º—É–∑–∏–∫–∏.</i>
<b>üí≥ –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–∞—Ä—Ç–∫–∏</b>
üçèABank24
<code>4323 3473 9773 4135</code>
üíµPrivat24
<code>5168 7451 5064 0644</code>
<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b>
ü™ôBTC
<code>123MgBkkpu6XwrU53SvrBxiW9useRSt6qR</code>
üíéTON
<code>UQDicYt03peG8l0CBCKW2YQJ914YoKkzObWFbbIIdUlqnpNJ</code>
üí∏USDT (TON)
<code>UQBqKU8fvbZVZJvyAw85wQP88O0sTzFkBxW1lfbht9hGayBK</code>
üí∏USDT (TRX)
<code>TXkiayvYBwyuX7r9dj5NvEfdF5FCJbu5kb</code>
–î—è–∫—É—é –∑–∞ –≤–∞—à—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É üöÄ""",
        "close_button": "üîª –ó–∞–∫—Ä–∏—Ç–∏",
        "website_button": "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ",
        "cryptobot_button": "CryptoBot",
        "xrocket_button": "xRocket",
        
        # –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        "/donate": (
            "<b>–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç ‚Äî —Ü–µ —á—É–¥–æ–≤–∞ —ñ–¥–µ—è! ‚ù§Ô∏è</b>\n\n"
            "<i>–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –º–æ—ó –∫–∞—Ä—Ç–∫–∏ (UA):</i>\n"
            "üçè <b>ABank24:</b> <code>4323347397734135</code>\n"
            "üí∏ <b>Privat24:</b> <code>5168745150640644</code>\n\n"
            "<i>–ê–±–æ –Ω–∞ –º–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ:</i>\n"
            "ü™ô <b>BTC:</b>\n<code>123MgBkkpu6XwrU53SvrBxiW9useRSt6qR</code>\n"
            "üíé <b>TON:</b>\n<code>UQDicYt03peG8l0CBCKW2YQJ914YoKkzObWFbbIIdUlqnpNJ</code>\n"
            "üí≤ <b>USDT (TON):</b>\n<code>UQBqKU8fvbZVZJvyAw85wQP88O0sTzFkBxW1lfbht9hGayBK</code>\n"
            "üí≤ <b>USDT (TRC-20):</b>\n<code>TXkiayvYBwyuX7r9dj5NvEfdF5FCJbu5kb</code>\n\n"
            "üöÄ <b>–®–≤–∏–¥–∫–∏–π –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ xRocket:</b> /xrocket\n\n"
            "<i>–î–ª—è –≤–∞—Å —Ü–µ –¥—Ä—ñ–±–Ω–∏—Ü—è, –∞ –¥–ª—è –º–µ–Ω–µ ‚Äî –≤–µ–ª–∏—á–µ–∑–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—è! –î—è–∫—É—é!</i> üòä"
        ),
        "/author": (
            "üòé <b>–ê–≤—Ç–æ—Ä –±–æ—Ç–∞:</b> @Author_Che.\n\n"
            "–¶–µ–π –±–æ—Ç —î <i>–ø–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º —Ç–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–∏</i>. "
            "–ô–æ–≥–æ –º–µ—Ç–∞ ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Telegram –ø—Ä–æ—Å—Ç—ñ—à–∏–º —Ç–∞ –∑—Ä—É—á–Ω—ñ—à–∏–º.\n\n"
            "–Ü–Ω—à—ñ –º–æ—ó –ø—Ä–æ—î–∫—Ç–∏ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —Ç—É—Ç: @wsinfo.\n\n"
            "<b>–ë—É–¥—É –≤–¥—è—á–Ω–∏–π –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø—Ä–æ—î–∫—Ç—É:</b> /donate"
        ),
        "/bots": (
            "<b>ü§ñ –ú–æ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –±–æ—Ç–∏:</b>\n\n"
            "üí¨ @vyfb_bot ‚Äî –Ω–∞–¥—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É.\n"
            "üõ†Ô∏è @UniVersalAuthorBot ‚Äî –±–∞–≥–∞—Ç–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç (–≤–µ–±-–≤–µ—Ä—Å—ñ—è: authorche.pp.ua/tools).\n"
            "üé≤ @ac_moder_bot ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø —ñ–∑ –∫–∞–∑–∏–Ω–æ.\n"
            "üì± @ADBCheHelperBot ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ ADB.\n"
            "‚úÖ @pollplot_bot ‚Äî —Å–ø–∏—Å–∫–∏ –∑–∞–≤–¥–∞–Ω—å —Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.\n"
            "‚òÅÔ∏è @authorcloud_bot ‚Äî –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Ö–º–∞—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ –≤ Telegram.\n\n"
            "<i>ü•∫ –ù–∞ –∂–∞–ª—å, —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥—É –Ω–µ –≤—Å—ñ –±–æ—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ. "
            "–í–∞—à –¥–æ–Ω–∞—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —ó—Ö–Ω—é —Ä–æ–±–æ—Ç—É.</i>\n\n"
            "<b>–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç–∏:</b> /donate"
        ),
        "/main": (
            "üòÖ <b>–ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É.</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: /menu"
        ),
        "/menu": (
            "üëã <b>–ü—Ä–∏–≤—ñ—Ç! –¶–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.</b>\n\n"
            "–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            "üòé /author ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞\n"
            "ü§ñ /bots ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–æ—î–∫—Ç–∏ –∞–≤—Ç–æ—Ä–∞\n"
            "‚ù§Ô∏è /donate ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ\n"
            "üí¨ /feedback ‚Äî –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º\n"
            "üìã /nometa ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
            "üìù /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é —â–µ —Ä–∞–∑\n\n"
            "<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b> ‚Äî —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É!"
        ),
        "/feedback": (
            "üí¨ <b>–ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º</b>\n\n"
            "–©–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑—ñ –º–Ω–æ—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ!\n\n"
            "‚úâÔ∏è <b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>\n"
            "- –í–∏ –ø–∏—à–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç\n"
            "- –Ø –π–æ–≥–æ –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Å–∏–ª–∞—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É\n"
            "- –í—ñ–Ω –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –æ—Å–æ–±–∏—Å—Ç–æ\n\n"
            "üìã <b>–ü–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏:</b> /nometa\n\n"
            "<i>–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —ñ —è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —ó—ó –ø–µ—Ä–µ–¥–∞–º!</i>"
        ),
        "/nometa": (
            "<b>–£–≤–∞–≥–∞!</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫—ñ, —è–∫:\n\n"
            "‚Ä¢ ¬´–ü—Ä–∏–≤—ñ—Ç¬ª\n"
            "‚Ä¢ ¬´–Ø–∫ —Å–ø—Ä–∞–≤–∏?¬ª\n" 
            "‚Ä¢ ¬´–©–æ —Ä–æ–±–∏—à?¬ª\n"
            "‚Ä¢ ¬´–ß–∏–º –∑–∞–π–º–∞—î—à—Å—è?¬ª\n"
            "‚Ä¢ —Ç–∞ —ñ–Ω—à—ñ –ø–æ–¥—ñ–±–Ω—ñ\n\n"
            "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —É –º–µ–Ω–µ —â–æ—Å—å –∑–∞–ø–∏—Ç–∞—Ç–∏, –ø–∏—Ç–∞–π—Ç–µ –ø–æ —Å—É—Ç—ñ, –∞ —Ç–∞–∫–æ–∂ –≤—Å—é —Å—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –æ–ø–∏—à—ñ—Ç—å –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n\n"
            "<i>–¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –µ–∫–æ–Ω–æ–º–∏—Ç–∏ —á–∞—Å —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!</i>"
        ),
        "start_heroku_init": "üöÄ <b>–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!</b>",
        "start_message": (
            "üëã <b>–ü—Ä–∏–≤—ñ—Ç! –Ø –±–∞–≥–∞—Ç–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç</b>\n\n"
            "–Ø –º–æ–∂—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —Ç–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
            "‚Ä¢ /menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "‚Ä¢ /author ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞\n"
            "‚Ä¢ /bots ‚Äî —ñ–Ω—à—ñ –±–æ—Ç–∏ –∞–≤—Ç–æ—Ä–∞\n"
            "‚Ä¢ /donate ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç\n"
            "‚Ä¢ /feedback ‚Äî –∑–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º\n"
            "‚Ä¢ /nometa ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n\n"
            "üí¨ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b> ‚Äî —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É!"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            # –§—ñ–¥–±–µ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            loader.ConfigValue(
                "feedback_mode",
                True,
                "–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "start_custom_text",
                None,
                "–í–≤–µ–¥—ñ—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è",
            ),
            loader.ConfigValue(
                "no_meta",
                "<b>–£–≤–∞–≥–∞!</b>\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫—ñ, —è–∫:\n\n¬´–ü—Ä–∏–≤—ñ—Ç¬ª , ¬´–Ø–∫ —Å–ø—Ä–∞–≤–∏?¬ª , ¬´–©–æ —Ä–æ–±–∏—à?¬ª , ¬´–ß–∏–º –∑–∞–π–º–∞—î—à—Å—è?¬ª —ñ —Ç.–¥.\n\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —É –º–µ–Ω–µ —â–æ—Å—å –∑–∞–ø–∏—Ç–∞—Ç–∏, –ø–∏—Ç–∞–π—Ç–µ –ø–æ —Å—É—Ç—ñ, –∞ —Ç–∞–∫–æ–∂ –≤—Å—é —Å—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –æ–ø–∏—à—ñ—Ç—å –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
                "–í–≤–µ–¥—ñ—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /nometa",
            ),
            loader.ConfigValue(
                "no_meta_baner",
                "https://te.legra.ph/file/91a54dee84cf1ec5990fd.jpg",
                "–í–≤–µ–¥—ñ—Ç—å –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ—Ç–∞-–±–∞–Ω–µ—Ä",
                validator=loader.validators.Link(),
            ),
            
            # –Ü–Ω—Ñ–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            loader.ConfigValue(
                "donate_text",
                None,
                "–¢–µ–∫—Å—Ç, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ñ .info",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "donate_banner_url",
                "https://authorche.top/poems/logo.jpg",
                "URL –±–∞–Ω–µ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ .info",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "sysinfo_banner_url",
                "https://raw.githubusercontent.com/AuthorChe-1/authorche-1.github.io/refs/heads/main/start.jpg",
                "URL –±–∞–Ω–µ—Ä–∞ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º—É sysinfo",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "website_url",
                "https://authorche.top/sup",
                "URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ'",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "cryptobot_url",
                "https://t.me/send?start=IVzEgNnRlefO",
                "URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'CryptoBot'",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "xrocket_url",
                "https://t.me/acdonate_bot?start=xrocket",
                "URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'xRocket'",
                validator=loader.validators.Link(),
            ),
        )

    async def on_dlmod(self, client, db):
        self.db.set("UniversalInfoMod", "ban_list", [])

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self._me = await client.get_me()
        self._name = utils.escape_html(get_display_name(self._me))
        
        # –§—ñ–¥–±–µ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        self.forwarding_enabled = {}
        self._ban_list = self.db.get("UniversalInfoMod", "ban_list", [])
        self.db.set("UniversalInfoMod", "state", "done")

    def _render_sysinfo(self):
        uname = lib_platform.uname()
        boot = psutil.boot_time()
        uptime = time.time() - boot
        freq = psutil.cpu_freq()
        load = psutil.cpu_percent(interval=0.5)
        user = getpass.getuser()
        vm, sm = psutil.virtual_memory(), psutil.swap_memory()
        net = psutil.net_io_counters()
        io = psutil.disk_io_counters()
        distro_name, distro_ver = get_distro_info()
        cpu_model = get_cpu_model()

        net_info = []
        for iface, addrs in psutil.net_if_addrs().items():
            ip = mac = "‚Äî"
            for addr in addrs:
                if addr.family == socket.AF_INET:
                    ip = addr.address
                elif hasattr(socket, 'AF_PACKET') and addr.family == socket.AF_PACKET:
                    mac = addr.address
            net_info.append(f"<b>{iface}</b>: IP <code>{ip}</code>, MAC <code>{mac}</code>")

        freq_str = f"{freq.current:.0f} MHz" if freq else "N/A"

        return (
            f"<blockquote><emoji document_id=5776118099812028333>üìü</emoji> <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
            f"<emoji document_id=5215186239853964761>üñ•Ô∏è</emoji> <b><u>–û–° —Ç–∞ —Å–∏—Å—Ç–µ–º–∞:</u></b>\n"
            f"<b>–û–°:</b> <code>{uname.system} {uname.release}</code>\n"
            f"<b>–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤:</b> <code>{distro_name} {distro_ver}</code>\n"
            f"<b>–Ø–¥—Ä–æ:</b> <code>{uname.version}</code>\n"
            f"<b>–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:</b> <code>{uname.machine}</code>\n"
            f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> <code>{user}</code>\n\n"
            f"<emoji document_id=5341715473882955310>‚öôÔ∏è</emoji> <b><u>–ü—Ä–æ—Ü–µ—Å–æ—Ä:</u></b>\n"
            f"<b>–ú–æ–¥–µ–ª—å:</b> <code>{cpu_model}</code>\n"
            f"<b>–Ø–¥—Ä–∞:</b> <code>{psutil.cpu_count(logical=False)}/{psutil.cpu_count(logical=True)}</code>\n"
            f"<b>–ß–∞—Å—Ç–æ—Ç–∞:</b> <code>{freq_str}</code>\n"
            f"<b>–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> <code>{load}%</code>\n\n"
            f"<emoji document_id=5237799019329105246>üß†</emoji> <b><u>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–º'—è—Ç—å:</u></b>\n"
            f"<b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ:</b> <code>{bytes2human(vm.used)}</code> / <code>{bytes2human(vm.total)}</code>\n"
            f"<b>–§–∞–π–ª –ø—ñ–¥–∫–∞—á–∫–∏:</b> <code>{bytes2human(sm.used)}</code> / <code>{bytes2human(sm.total)}</code>\n\n"
            f"<emoji document_id=5462956611033117422>üíæ</emoji> <b><u>–î–∏—Å–∫:</u></b>\n"
            f"<b>–ß–∏—Ç–∞–Ω–Ω—è:</b> <code>{bytes2human(io.read_bytes)}</code>\n"
            f"<b>–ó–∞–ø–∏—Å:</b> <code>{bytes2human(io.write_bytes)}</code>\n\n"
            f"<emoji document_id=5321141214735508486>üì°</emoji> <b><u>–ú–µ—Ä–µ–∂–∞:</u></b>\n"
            f"<b>–û—Ç—Ä–∏–º–∞–Ω–æ:</b> <code>{bytes2human(net.bytes_recv)}</code>\n"
            f"<b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{bytes2human(net.bytes_sent)}</code>\n"
            f"{chr(10).join(net_info)}\n\n"
            f"<emoji document_id=5382194935057372936>‚è±</emoji> <b><u>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</u></b>\n"
            f"<b>–ó:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(boot))}</code>\n"
            f"<b>–ê–ø—Ç–∞–π–º:</b> <code>{format_uptime(uptime)}</code>\n\n"
            f"<emoji document_id=5854908544712707500>üì¶</emoji> <b><u>–í–µ—Ä—Å—ñ—ó:</u></b>\n"
            f"<b>Python:</b> <code>{lib_platform.python_version()}</code>\n"
            f"<b>Telethon:</b> <code>{telethon.__version__}</code></blockquote>"
        )

    # --- Userbot Commands ---

    @loader.command()
    async def sysinfo(self, message: Message):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä"""
        await utils.answer(message, self._render_sysinfo())
    
    @loader.command()
    async def info(self, message: Message):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Ä–æ—î–∫—Ç—É"""
        donate_text = self.config["donate_text"] or self.strings["donate_text"]
        await self.inline.form(
            message=message,
            text=donate_text,
            photo=self.config["donate_banner_url"],
            reply_markup=[
                [{"text": self.strings["website_button"], "url": self.config["website_url"]}],
                [
                    {"text": self.strings["cryptobot_button"], "url": self.config["cryptobot_url"]},
                    {"text": self.strings["xrocket_button"], "url": self.config["xrocket_url"]},
                ],
                [{"text": self.strings["close_button"], "callback": self.delete_form}],
            ],
        )

    async def delete_form(self, call):
        await call.delete()

    # --- –§—ñ–¥–±–µ–∫ –∫–æ–º–∞–Ω–¥–∏ ---

    @loader.command()
    async def flink(self, message):
        """- –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞"""
        slinkbot = f"{self.strings['flink']}: https://t.me/{self.inline.bot_username}?start=feedback"
        await utils.answer(message, slinkbot)

    @loader.command()
    async def banfeedback(self, message):
        """[UserID] - –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞"""
        user_id = utils.get_args_raw(message)
        if not user_id:
            await utils.answer(message, self.strings["not_arg"])
        else:
            user_id = int(user_id)
            if user_id not in self._ban_list:
                self._ban_list.append(user_id)
                self.db.set("UniversalInfoMod", "ban_list", self._ban_list)
                await utils.answer(message, self.strings["successfully_ban"])
            else:
                await utils.answer(message, self.strings["already_banned"])

    @loader.command()
    async def unbanfeedback(self, message):
        """[UserID] - –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞"""
        user_id = utils.get_args_raw(message)
        if not user_id:
            await utils.answer(message, self.strings["not_arg"])
        else:
            user_id = int(user_id)
            if user_id in self._ban_list:
                self._ban_list.remove(user_id)
                self.db.set("UniversalInfoMod", "ban_list", self._ban_list)
                await utils.answer(message, self.strings["successfully_unban"])
            else:
                await utils.answer(message, self.strings["not_in_ban"])

    # --- Inline Handler ---

    @loader.inline_everyone
    async def info_inline_handler(self, query: InlineQuery) -> dict:
        """–û–±—Ä–æ–±–ª—è—î —ñ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Ç–∏ –¥–ª—è sysinfo —Ç–∞ info"""
        donate_text = self.config["donate_text"] or self.strings["donate_text"]
        
        info_result = {
            "title": self.strings["send_donate_info"],
            "description": self.strings["donate_description"],
            "caption": donate_text,
            "photo": self.config["donate_banner_url"],
            "thumb": self.config["donate_banner_url"],
            "reply_markup": [
                [{"text": self.strings["website_button"], "url": self.config["website_url"]}],
                [
                    {"text": self.strings["cryptobot_button"], "url": self.config["cryptobot_url"]},
                    {"text": self.strings["xrocket_button"], "url": self.config["xrocket_url"]},
                ],
            ],
        }

        sysinfo_result = {
            "title": self.strings["send_sysinfo"],
            "description": self.strings["sysinfo_description"],
            "message": self._render_sysinfo(),
            "thumb": self.config["sysinfo_banner_url"],
        }
        
        return [info_result, sysinfo_result]

    # --- –§—ñ–¥–±–µ–∫ –æ–±—Ä–æ–±–Ω–∏–∫ ---
    async def aiogram_watcher(self, message: AiogramMessage):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—ñ–¥–≤'—è–∑–∞–Ω–æ–≥–æ –±–æ—Ç–∞"""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Ñ—ñ–¥–±–µ–∫—É
        if self.config["feedback_mode"] and message.from_user.id not in self._ban_list:
            if message.text == "/start feedback":
                text = self.config["start_custom_text"] or self.strings["feedback_start"]
                await message.answer(text)
                return

            elif message.text == "/nometa":
                meta_text = self.config["no_meta"]
                if self.config["no_meta_baner"] is None:
                    await self.inline.bot.send_message(
                        chat_id=message.from_user.id, text=meta_text
                    )
                else:
                    await self.inline.bot.send_photo(
                        chat_id=message.from_user.id,
                        photo=self.config["no_meta_baner"],
                        caption=meta_text,
                    )
                return

            # –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞
            if message.from_user.id == self._me.id:
                state = self.db.get("UniversalInfoMod", "state")
                if state.startswith("waiting_"):
                    to_id = int(state.split("_")[1])
                    waiting_message_id = int(state.split("_")[2])
                    custom_text = f"{self.strings['owner_answer']}:\n\n{message.text}"
                    await self.inline.bot.send_message(chat_id=to_id, text=custom_text)
                    await self.inline.bot.delete_message(
                        chat_id=message.chat.id, message_id=waiting_message_id
                    )
                    await self.inline.bot.send_message(
                        chat_id=self._me.id, text=f"{self.strings['successfully_send']}"
                    )
                    self.db.set("UniversalInfoMod", "state", "done")
                    return

            # –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (message.text and not message.text.startswith('/')) or message.caption:
                original_text = message.caption if message.caption else message.text
                user_id = message.from_user.id
                
                WriteInPM = f'<b><a href="tg://user?id={user_id}">‚úèÔ∏è–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ</a></b>'
                custom_text = f"{self.strings['new_m']} {escape(message.from_user.first_name)}:\n\n{escape(original_text) if original_text is not None else self.strings['not_text']}\n\nUserID: {message.from_user.id}\n{WriteInPM}"

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —è–∫ —É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –º–æ–¥—É–ª—ñ AuroraFeedBack
                buttons = [
                    [
                        InlineKeyboardButton(
                            text=self.strings["reply_button"], 
                            callback_data=f"reply_{user_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üîê –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"ban_{user_id}"),
                        InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="MessageDelete")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)

                await self.inline.bot.send_message(
                    chat_id=self._me.id, text=custom_text, reply_markup=reply_markup
                )
                await self.inline.bot.send_message(
                    chat_id=message.from_user.id, text=f"{self.strings['successfully_send']}"
                )
                return

        # –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        if message.text and message.text.startswith("/start heroku init"):
            await message.answer(self.strings["start_heroku_init"])
            return

        if message.text == "/donate":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="CryptoBot üí≥", url=self.config["cryptobot_url"])]
            ])
            await message.answer(self.strings["/donate"], reply_markup=keyboard)
        elif message.text == "/menu" or message.text == "/start":
            await message.answer(self.strings["/menu"])
        elif message.text == "/bots":
            await message.answer(self.strings["/bots"])
        elif message.text == "/author":
            await message.answer(self.strings["/author"])
        elif message.text == "/feedback":
            await message.answer(self.strings["/feedback"])
        elif message.text == "/nometa":
            await message.answer(self.strings["/nometa"])
        elif message.text == "/xrocket":
            xrocket_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="TON", url="https://t.me/xrocket?start=inv_4Wfq3fmqadtyNEP")],
                [InlineKeyboardButton(text="USDT", url="https://t.me/xrocket?start=inv_i8nnYkalSWY7n8i")],
                [InlineKeyboardButton(text="TRX", url="https://t.me/xrocket?start=inv_QOTWjNQHWLPkfrJ")],
                [InlineKeyboardButton(text="BTC", url="https://t.me/xrocket?start=inv_QYFKjAKihGWpTW1")]
            ])
            await message.answer("üöÄ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ xRocket:</b>", reply_markup=xrocket_keyboard)
        elif message.text and message.text.startswith('/'):
            await message.answer(self.strings["/main"])

    # --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ñ—ñ–¥–±–µ–∫—É ---
    async def feedback_callback_handler(self, call: InlineCall):
        if call.data == "MessageDelete":
            await self.inline.bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
            )
            return
            
        if call.data.startswith("ban_"):
            user_id = int(call.data.split("_")[1])
            if user_id not in self._ban_list:
                self._ban_list.append(user_id)
                self.db.set("UniversalInfoMod", "ban_list", self._ban_list)
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"unban_{user_id}"
                        )
                    ]
                ]
            )
            await self.inline.bot.send_message(
                chat_id=self._me.id,
                text=f"{self.strings['successfully_ban']} ({user_id})",
                reply_markup=reply_markup,
            )
            return
            
        if call.data.startswith("unban_"):
            user_id = int(call.data.split("_")[1])
            if user_id in self._ban_list:
                self._ban_list.remove(user_id)
                self.db.set("UniversalInfoMod", "ban_list", self._ban_list)
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîê –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"ban_{user_id}"
                        )
                    ]
                ]
            )
            await self.inline.bot.send_message(
                chat_id=self._me.id,
                text=f"{self.strings['successfully_unban']} ({user_id})",
                reply_markup=reply_markup,
            )
            return
            
        if call.data.startswith("reply"):
            user_id = int(call.data.split("_")[1])
            self.db.set(
                "UniversalInfoMod",
                "state",
                f"waiting_{user_id}_{call.message.message_id}",
            )
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_reply"
                        )
                    ]
                ]
            )
            await self.inline.bot.send_message(
                chat_id=self._me.id,
                text=f"{self.strings['waiting_answer']}",
                reply_markup=reply_markup,
            )
            
        if call.data == "cancel_reply":
            self.db.set("UniversalInfoMod", "state", "done")
            await self.inline.bot.delete_message(
                chat_id=call.message.chat.id, message_id=call.message.message_id
            )