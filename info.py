import time
import psutil
import platform as lib_platform
import getpass
import telethon
import socket
import logging
import abc

from aiogram.types import Message as AiogramMessage, InlineKeyboardMarkup, InlineKeyboardButton
from hikkatl.tl.types import Message
from hikkatl.utils import get_display_name
from .. import loader, utils
from ..inline.types import InlineQuery

logger = logging.getLogger(__name__)

# --- Helper functions ---
def bytes2human(n):
    symbols = ('B','K','M','G','T','P')
    prefix = {s:1<<(i*10) for i,s in enumerate(symbols[1:],1)}
    for s in reversed(symbols[1:]):
        if n >= prefix[s]:
            return f"{n/prefix[s]:.2f}{s}"
    return f"{n}B"

def format_uptime(sec):
    m, s = divmod(sec, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    return f"{int(d)}d {int(h)}h {int(m)}m"

def get_distro_info():
    name = ver = "N/A"
    try:
        with open("/etc/os-release") as f:
            data = dict(line.strip().split("=", 1) for line in f if "=" in line)
        name = data.get("PRETTY_NAME", data.get("NAME", "Unknown")).strip('"')
        ver = data.get("VERSION_ID", "").strip('"')
    except: pass
    return name, ver

def get_cpu_model():
    try:
        with open("/proc/cpuinfo") as f:
            for line in f:
                if "model name" in line:
                    return line.split(":",1)[1].strip()
    except: pass
    return lib_platform.processor() or "Unknown"

@loader.tds
class InfoMod(loader.Module):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º"""

    strings = {
        "name": "–Ü–Ω—Ñ–æ",
        # --- Strings for sysinfo command ---
        "send_sysinfo": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
        "sysinfo_description": "‚Ñπ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä",
        # --- Strings for info (donate) command ---
        "send_donate_info": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –¥–æ–Ω–∞—Ç—É",
        "donate_description": "‚ù§Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ",
        "donate_text": """<b>–ü—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ –º–æ—é —Ç–≤–æ—Ä—á—ñ—Å—Ç—å</b>
<i>–ö–æ–∂–µ–Ω –≤–Ω–µ—Å–æ–∫ —Ä–æ–∑–ø–∞–ª—é—î –Ω–æ–≤—ñ —ñ–¥–µ—ó —ñ –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ –≤—ñ—Ä—à—ñ–≤ —Ç–∞ –º—É–∑–∏–∫–∏.</i>
<b>üí≥ –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–∞—Ä—Ç–∫–∏</b>
üçèABank24
<code>4323 3473 9773 4135</code>
üíµPrivat24
<code>5168 7451 5064 0644</code>
<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b>
ü™ôBTC
<code>123MgBkkpu6XwrU53SvrBxiW9useRSt6qR</code>
üíéTON
<code>UQDicYt03peG8l0CBCKW2YQJ914YoKkzObWFbbIIdUlqnpNJ</code>
üí∏USDT (TON)
<code>UQBqKU8fvbZVZJvyAw85wQP88O0sTzFkBxW1lfbht9hGayBK</code>
üí∏USDT (TRX)
<code>TXkiayvYBwyuX7r9dj5NvEfdF5FCJbu5kb</code>
–î—è–∫—É—é –∑–∞ –≤–∞—à—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É üöÄ""",
        "close_button": "üîª –ó–∞–∫—Ä–∏—Ç–∏",
        "website_button": "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ",
        "cryptobot_button": "CryptoBot",
        "xrocket_button": "xRocket",
        # --- Strings for bot commands ---
        "/donate": (
            "<b>–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç ‚Äî —Ü–µ —á—É–¥–æ–≤–∞ —ñ–¥–µ—è! ‚ù§Ô∏è</b>\n\n"
            "<i>–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –º–æ—ó –∫–∞—Ä—Ç–∫–∏ (UA):</i>\n"
            "üçè <b>ABank24:</b> <code>4323347397734135</code>\n"
            "üí∏ <b>Privat24:</b> <code>5168745150640644</code>\n\n"
            "<i>–ê–±–æ –Ω–∞ –º–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ:</i>\n"
            "ü™ô <b>BTC:</b>\n<code>123MgBkkpu6XwrU53SvrBxiW9useRSt6qR</code>\n"
            "üíé <b>TON:</b>\n<code>UQDicYt03peG8l0CBCKW2YQJ914YoKkzObWFbbIIdUlqnpNJ</code>\n"
            "üí≤ <b>USDT (TON):</b>\n<code>UQBqKU8fvbZVZJvyAw85wQP88O0sTzFkBxW1lfbht9hGayBK</code>\n"
            "üí≤ <b>USDT (TRC-20):</b>\n<code>TXkiayvYBwyuX7r9dj5NvEfdF5FCJbu5kb</code>\n\n"
            "üöÄ <b>–®–≤–∏–¥–∫–∏–π –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ xRocket:</b> /xrocket\n\n"
            "<i>–î–ª—è –≤–∞—Å —Ü–µ –¥—Ä—ñ–±–Ω–∏—Ü—è, –∞ –¥–ª—è –º–µ–Ω–µ ‚Äî –≤–µ–ª–∏—á–µ–∑–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—è! –î—è–∫—É—é!</i> üòä"
        ),
        "/author": (
            "üòé <b>–ê–≤—Ç–æ—Ä –±–æ—Ç–∞:</b> @Author_Che.\n\n"
            "–¶–µ–π –±–æ—Ç —î <i>–ø–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º —Ç–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–∏</i>. "
            "–ô–æ–≥–æ –º–µ—Ç–∞ ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Telegram –ø—Ä–æ—Å—Ç—ñ—à–∏–º —Ç–∞ –∑—Ä—É—á–Ω—ñ—à–∏–º.\n\n"
            "–Ü–Ω—à—ñ –º–æ—ó –ø—Ä–æ—î–∫—Ç–∏ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —Ç—É—Ç: @wsinfo.\n\n"
            "<b>–ë—É–¥—É –≤–¥—è—á–Ω–∏–π –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø—Ä–æ—î–∫—Ç—É:</b> /donate"
        ),
        "/bots": (
            "<b>ü§ñ –ú–æ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –±–æ—Ç–∏:</b>\n\n"
            "üí¨ @vyfb_bot ‚Äî –Ω–∞–¥—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É.\n"
            "üõ†Ô∏è @UniVersalAuthorBot ‚Äî –±–∞–≥–∞—Ç–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç (–≤–µ–±-–≤–µ—Ä—Å—ñ—è: authorche.pp.ua/tools).\n"
            "üé≤ @ac_moder_bot ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø —ñ–∑ –∫–∞–∑–∏–Ω–æ.\n"
            "üì± @ADBCheHelperBot ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ ADB.\n"
            "‚úÖ @pollplot_bot ‚Äî —Å–ø–∏—Å–∫–∏ –∑–∞–≤–¥–∞–Ω—å —Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.\n"
            "‚òÅÔ∏è @authorcloud_bot ‚Äî –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Ö–º–∞—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ –≤ Telegram.\n\n"
            "<i>ü•∫ –ù–∞ –∂–∞–ª—å, —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥—É –Ω–µ –≤—Å—ñ –±–æ—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ. "
            "–í–∞—à –¥–æ–Ω–∞—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —ó—Ö–Ω—é —Ä–æ–±–æ—Ç—É.</i>\n\n"
            "<b>–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç–∏:</b> /donate"
        ),
        "/main": (
            "üòÖ <b>–ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É.</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: /menu"
        ),
        "/menu": (
            "üëã <b>–ü—Ä–∏–≤—ñ—Ç! –¶–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.</b>\n\n"
            "–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            "üòé /author ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞.\n"
            "ü§ñ /bots ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–æ—î–∫—Ç–∏ –∞–≤—Ç–æ—Ä–∞.\n"
            "‚ù§Ô∏è /donate ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ.\n"
            "üìù /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é —â–µ —Ä–∞–∑."
        ),
        "start_heroku_init": "üöÄ <b>–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "donate_text",
                self.strings["donate_text"],
                "–¢–µ–∫—Å—Ç, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—ñ .info",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "donate_banner_url",
                "https://authorche.top/poems/logo.jpg",
                "URL –±–∞–Ω–µ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ .info",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "sysinfo_banner_url",
                "https://raw.githubusercontent.com/AuthorChe-1/authorche-1.github.io/refs/heads/main/start.jpg",
                "URL –±–∞–Ω–µ—Ä–∞ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º—É sysinfo",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "website_url",
                "https://authorche.top/sup",
                "URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ'",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "cryptobot_url",
                "https://t.me/send?start=IVzEgNnRlefO",
                "URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'CryptoBot'",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "xrocket_url",
                "https://t.me/acdonate_bot?start=xrocket",
                "URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'xRocket'",
                validator=loader.validators.Link(),
            ),
        )

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self._me = await client.get_me()
        self._name = utils.escape_html(get_display_name(self._me))

    def _render_sysinfo(self):
        uname = lib_platform.uname()
        boot = psutil.boot_time()
        uptime = time.time() - boot
        freq = psutil.cpu_freq()
        load = psutil.cpu_percent(interval=0.5)
        user = getpass.getuser()
        vm, sm = psutil.virtual_memory(), psutil.swap_memory()
        net = psutil.net_io_counters()
        io = psutil.disk_io_counters()
        distro_name, distro_ver = get_distro_info()
        cpu_model = get_cpu_model()

        net_info = []
        for iface, addrs in psutil.net_if_addrs().items():
            ip = mac = "‚Äî"
            for addr in addrs:
                if addr.family == socket.AF_INET:
                    ip = addr.address
                elif hasattr(socket, 'AF_PACKET') and addr.family == socket.AF_PACKET:
                    mac = addr.address
            net_info.append(f"<b>{iface}</b>: IP <code>{ip}</code>, MAC <code>{mac}</code>")

        freq_str = f"{freq.current:.0f} MHz" if freq else "N/A"

        return (
            f"<blockquote><emoji document_id=5776118099812028333>üìü</emoji> <b>System Info</b>\n\n"
            f"<emoji document_id=5215186239853964761>üñ•Ô∏è</emoji> <b><u>–û–° –∏ —Å–∏—Å—Ç–µ–º–∞:</u></b>\n"
            f"<b>OS:</b> <code>{uname.system} {uname.release}</code>\n"
            f"<b>Distro:</b> <code>{distro_name} {distro_ver}</code>\n"
            f"<b>Kernel:</b> <code>{uname.version}</code>\n"
            f"<b>Arch:</b> <code>{uname.machine}</code>\n"
            f"<b>User:</b> <code>{user}</code>\n\n"
            f"<emoji document_id=5341715473882955310>‚öôÔ∏è</emoji> <b><u>CPU:</u></b>\n"
            f"<b>Model:</b> <code>{cpu_model}</code>\n"
            f"<b>Cores:</b> <code>{psutil.cpu_count(logical=False)}/{psutil.cpu_count(logical=True)}</code>\n"
            f"<b>Freq:</b> <code>{freq_str}</code>\n"
            f"<b>Load:</b> <code>{load}%</code>\n\n"
            f"<emoji document_id=5237799019329105246>üß†</emoji> <b><u>RAM:</u></b>\n"
            f"<b>Used:</b> <code>{bytes2human(vm.used)}</code> / <code>{bytes2human(vm.total)}</code>\n"
            f"<b>Swap:</b> <code>{bytes2human(sm.used)}</code> / <code>{bytes2human(sm.total)}</code>\n\n"
            f"<emoji document_id=5462956611033117422>üíæ</emoji> <b><u>–î–∏—Å–∫:</u></b>\n"
            f"<b>Read:</b> <code>{bytes2human(io.read_bytes)}</code>\n"
            f"<b>Write:</b> <code>{bytes2human(io.write_bytes)}</code>\n\n"
            f"<emoji document_id=5321141214735508486>üì°</emoji> <b><u>–°–µ—Ç—å:</u></b>\n"
            f"<b>Recv:</b> <code>{bytes2human(net.bytes_recv)}</code>\n"
            f"<b>Sent:</b> <code>{bytes2human(net.bytes_sent)}</code>\n"
            f"{chr(10).join(net_info)}\n\n"
            f"<emoji document_id=5382194935057372936>‚è±</emoji> <b><u>–ê–ø—Ç–∞–π–º:</u></b>\n"
            f"<b>Since:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(boot))}</code>\n"
            f"<b>Uptime:</b> <code>{format_uptime(uptime)}</code>\n\n"
            f"<emoji document_id=5854908544712707500>üì¶</emoji> <b><u>–í–µ—Ä—Å–∏–∏:</u></b>\n"
            f"<b>Python:</b> <code>{lib_platform.python_version()}</code>\n"
            f"<b>Telethon:</b> <code>{telethon.__version__}</code></blockquote>"
        )

    # --- Userbot Commands ---

    @loader.command()
    async def sysinfo(self, message: Message):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä"""
        await utils.answer(message, self._render_sysinfo())
    
    @loader.command()
    async def info(self, message: Message):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Ä–æ—î–∫—Ç—É"""
        await self.inline.form(
            message=message,
            text=str(self.config["donate_text"]),
            photo=self.config["donate_banner_url"],
            reply_markup=[
                [{"text": self.strings["website_button"], "url": self.config["website_url"]}],
                [
                    {"text": self.strings["cryptobot_button"], "url": self.config["cryptobot_url"]},
                    {"text": self.strings["xrocket_button"], "url": self.config["xrocket_url"]},
                ],
                [{"text": self.strings["close_button"], "callback": self.delete_form}],
            ],
        )

    async def delete_form(self, call):
        await call.delete()

    # --- Inline Handler ---

    @loader.inline_everyone
    async def info_inline_handler(self, query: InlineQuery) -> dict:
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É —Ç–∞ –ø—ñ—Ç—Ä–∏–º–∫—É –ø—Ä–æ—î–∫—Ç—É."""
        info_result = {
            "title": self.strings("send_donate_info"),
            "description": self.strings("donate_description"),
            "caption": self.config["donate_text"],
            "photo": self.config["donate_banner_url"],
            "thumb": self.config["donate_banner_url"],
            "reply_markup": [
                [{"text": self.strings["website_button"], "url": self.config["website_url"]}],
                [
                    {"text": self.strings["cryptobot_button"], "url": self.config["cryptobot_url"]},
                    {"text": self.strings["xrocket_button"], "url": self.config["xrocket_url"]},
                ],
            ],
        }

        sysinfo_result = {
            "title": self.strings("send_sysinfo"),
            "description": self.strings("sysinfo_description"),
            "message": self._render_sysinfo(),
            "thumb": self.config["sysinfo_banner_url"],
        }
        
        return [info_result, sysinfo_result]

    # --- Bot Commands Watcher ---

    async def aiogram_watcher(self, message: AiogramMessage):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—ñ–¥–≤'—è–∑–∞–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if message.text and message.text.startswith("/start heroku init"):
            await message.answer(self.strings["start_heroku_init"])
            return

        if message.text == "/donate":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="CryptoBot üí≥", url=self.config["cryptobot_url"])]
            ])
            await message.answer(self.strings["/donate"], reply_markup=keyboard)
        elif message.text == "/menu" or message.text == "/start":
            await message.answer(self.strings["/menu"])
        elif message.text == "/bots":
            await message.answer(self.strings["/bots"])
        elif message.text == "/author":
            await message.answer(self.strings["/author"])
        elif message.text == "/xrocket":
            xrocket_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="TON", url="https://t.me/xrocket?start=inv_4Wfq3fmqadtyNEP")],
                [InlineKeyboardButton(text="USDT", url="https://t.me/xrocket?start=inv_i8nnYkalSWY7n8i")],
                [InlineKeyboardButton(text="TRX", url="https://t.me/xrocket?start=inv_QOTWjNQHWLPkfrJ")],
                [InlineKeyboardButton(text="BTC", url="https://t.me/xrocket?start=inv_QYFKjAKihGWpTW1")]
            ])
            await message.answer("üöÄ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ xRocket:</b>", reply_markup=xrocket_keyboard)
        elif message.text:
            await message.answer(self.strings["/main"])
